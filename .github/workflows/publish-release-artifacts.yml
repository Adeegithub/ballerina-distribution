name: Publish Release Artifacts

on:
  workflow_dispatch:
    inputs:
      ballerina_version:
        description: 'Ballerina Version'
        default: '2201.1.1'
        required: true
      short_version:
        description: 'Short Version'
        default: '2201.1.1'
        required: true
      display_version:
        description: 'Display Version'
        default: '2201.1.1 (Swan Lake Update 1)'
        required: true
      code_name:
        description: 'Code Name'
        default: 'swan-lake'
        required: true
      rc_suffix:
        description: 'RC Suffix'
        deprecationMessage: 'If this is a pre-release, the suffix to append to the version e.g., rc1'
        default: ''
        required: false

jobs:
  publish-artifacts:
    name: Publish Release Artifacts
    runs-on: ubuntu-latest
    if: github.repository_owner == 'ballerina-platform'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Set version env variable
        id: set-version
        run: |
          RELEASE_VERSION=${{ github.event.inputs.ballerina_version }}
          SHORT_VERSION=${{ github.event.inputs.short_version }}
          CODE_NAME=${{ github.event.inputs.code_name }}
          DISPLAY_VERSION="${{ github.event.inputs.display_version }}"

          TAGGED_VERSION=$RELEASE_VERSION
          LONG_VERSION=$RELEASE_VERSION-$CODE_NAME
          if [ -n "${{ github.event.inputs.rc_suffix }}" ]; then
            TAGGED_VERSION=$RELEASE_VERSION-${{ github.event.inputs.rc_suffix }}
          fi

          echo VERSION=$RELEASE_VERSION >> $GITHUB_ENV
          echo SHORT_VERSION=$SHORT_VERSION >> $GITHUB_ENV
          echo GIT_TAG=$TAGGED_VERSION >> $GITHUB_ENV
          echo LONG_VERSION=$LONG_VERSION >> $GITHUB_ENV
          echo DISPLAY_VERSION=$DISPLAY_VERSION >> $GITHUB_ENV
          echo "::set-output name=version::$RELEASE_VERSION"
          echo "::set-output name=taggedVersion::$TAGGED_VERSION"

      - name: Download artifacts
        run: |
          baseUrl="https://github.com/ballerina-platform/ballerina-distribution/releases/download/v$GIT_TAG"
          rm -rf $VERSION
          mkdir $VERSION
          cd $VERSION

          echo "$baseUrl/ballerina-$LONG_VERSION.zip"

          wget "$baseUrl/ballerina-$LONG_VERSION.zip"
          wget "$baseUrl/ballerina-$SHORT_VERSION.zip"
          wget "$baseUrl/ballerina-$LONG_VERSION-windows-x64.msi"
          wget "$baseUrl/ballerina-$LONG_VERSION-linux-x64.deb"
          wget "$baseUrl/ballerina-$LONG_VERSION-linux-x64.rpm"
          wget "$baseUrl/ballerina-$LONG_VERSION-macos-x64.pkg"

          mkdir internal-installer-distributions
          cd internal-installer-distributions
          wget "$baseUrl/ballerina-$LONG_VERSION-windows.zip"
        env:
          GITHUB_TOKEN: ${{ secrets.BALLERINA_BOT_TOKEN }}
          packageUser: ${{ secrets.BALLERINA_BOT_USERNAME }}
          packagePAT: ${{ secrets.BALLERINA_BOT_TOKEN }}
          devCentralToken: ${{ secrets.BALLERINA_DEV_CENTRAL_ACCESS_TOKEN }}

      - name: Generate metadata json
        working-directory: ${{ steps.set-version.outputs.version }}
        run: |
          date=`date +%Y-%m-%d`
          winInstSize=`ls -lh ballerina-$LONG_VERSION-windows-x64.msi | cut -d " " -f5 | sed 's/M/mb/g'`
          linuxInstSize=`ls -lh ballerina-$LONG_VERSION-linux-x64.deb | cut -d " " -f5 | sed 's/M/mb/g'`
          rpmInstSize=`ls -lh ballerina-$LONG_VERSION-linux-x64.rpm | cut -d " " -f5 | sed 's/M/mb/g'`
          macInstSize=`ls -lh ballerina-$LONG_VERSION-macos-x64.pkg | cut -d " " -f5 | sed 's/M/mb/g'`

          fileName=metadata.json
          echo "{" >> $fileName
          echo "	\"version\":\"$VERSION\"," >> $fileName
          echo "	\"short-version\":\"$SHORT_VERSION\"," >> $fileName
          echo "	\"display-version\":\"$DISPLAY_VERSION\"," >> $fileName
          echo "	\"release-date\":\"$date\"," >> $fileName
          echo "	\"windows-installer\":\"ballerina-$LONG_VERSION-windows-x64.msi\"," >> $fileName
          echo "	\"windows-installer-size\":\"$winInstSize\"," >> $fileName
          echo "	\"linux-installer\":\"ballerina-$LONG_VERSION-linux-x64.deb\"," >> $fileName
          echo "	\"linux-installer-size\":\"$linuxInstSize\"," >> $fileName
          echo "	\"macos-installer\":\"ballerina-$LONG_VERSION-macos-x64.pkg\"," >> $fileName
          echo "	\"macos-installer-size\":\"$macInstSize\"," >> $fileName
          echo "	\"rpm-installer\":\"ballerina-$LONG_VERSION-linux-x64.rpm\"," >> $fileName
          echo "	\"rpm-installer-size\":\"$rpmInstSize\"," >> $fileName
          echo "	\"other-artefacts\":[  " >> $fileName
          echo "		\"ballerina-$LONG_VERSION.zip\"" >> $fileName
          echo " 	]", >> $fileName
          echo "	\"api-docs\":\"ballerina-api-docs-$VERSION.zip\"," >> $fileName
          echo "	\"release-notes\":\"ballerina-release-notes-$VERSION.md\"" >> $fileName
          echo "}" >> $fileName

      - name: Archive metadata json
        uses: actions/upload-artifact@v2
        with:
          name: Metadata JSON
          path: ${{ steps.set-version.outputs.version }}/metadata.json

      - name: Checkout docker repo
        uses: actions/checkout@v2
        with:
          repository: ballerina-platform/module-ballerina-docker
          path: module-ballerina-docker

      - name: Copy zip artifact
        run: cp $VERSION/ballerina-$SHORT_VERSION.zip module-ballerina-docker/base/docker/

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push docker image
        uses: docker/build-push-action@v2
        with:
          context: module-ballerina-docker/base/docker/
          push: true
          tags: ballerina/ballerina:$GIT_TAG
          build-args: |
            BALLERINA_DIST=ballerina-$SHORT_VERSION.zip

      - name: Copy deb artifact
        run: cp $VERSION/ballerina-$LONG_VERSION-linux-x64.deb module-ballerina-docker/base/devcontainer/

      - name: Build and push dev container image
        uses: docker/build-push-action@v2
        with:
          context: module-ballerina-docker/base/devcontainer/
          push: true
          tags: ballerina/ballerina-devcontainer:$GIT_TAG
          build-args: |
            BALLERINA_DIST=ballerina-$LONG_VERSION-linux-x64.deb

      - name: Publish Artifacts
        run: |
          aws s3 cp $VERSION s3://dist-dev.ballerina.io/downloads/$VERSION --recursive
        env:
          s3_acc_id: ${{ secrets.S3_ID }}
          s3_acc_key: ${{ secrets.S3_KEY }}

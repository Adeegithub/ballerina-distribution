// An object defined as `isolated` is similar to a module with `isolated` module-level variables.
// Mutable fields of an `isolated` object <br></br>
// - must be `private` and so can only be accessed using `self`. <br></br>
// - must be initialized with an `isolated` expression. <br></br>
// - must only be accessed within a `lock` statement. <br></br>
// - `lock` statement must follow the same rules for `self` as for an `isolated` variable. <br></br>
// - field is mutable unless it is `final` and has type that is subtype of `readonly`. <br></br>
// Isolated root concept treats `isolated` objects as opaque. Isolated functions can access a `final`
// variable whose type is an `isolated` object.

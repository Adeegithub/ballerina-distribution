import ballerina/io;
import ballerina/log;
import ballerinax/java.jdbc;
import ballerina/sql;

public function main() returns error? {
    // Initializes the JDBC client. The `jdbcClient` can be reused to access the database throughout the application execution.
    jdbc:Client jdbcClient = check new ("jdbc:h2:file:./target/bbes/java_jdbc",
        "rootUser", "rootPass");
    // Runs the prerequisite setup for the example.
    check initialize(jdbcClient);

    // Records with the duplicate `registrationID` entry. Here, it is registrationID = 1.
    var customers = [
        {
            firstName: "Linda",
            lastName: "Jones",
            registrationID: 2,
            creditLimit: 10000.75,
            country: "USA"
        },
        {
            firstName: "Peter",
            lastName: "Stuart",
            registrationID: 1,
            creditLimit: 5000.75,
            country: "USA"
        },
        {
            firstName: "Camellia",
            lastName: "Potter",
            registrationID: 4,
            creditLimit: 2000.25,
            country: "USA"
        }
    ];

    // Creates a batch-parameterized query.
    sql:ParameterizedQuery[] insertQueries =
        from var customer in customers
        select `INSERT INTO Customers
                (firstName, lastName, registrationID, creditLimit, country)
                VALUES (${customer.firstName}, ${customer.lastName},
                ${customer.registrationID}, ${customer.creditLimit}, 
                ${customer.country})`;

    // The transaction block can be used to roll back if any error occurred.
    transaction {
        sql:ExecutionResult[]|sql:Error result = 
                                    jdbcClient->batchExecute(insertQueries);
        if result is sql:BatchExecuteError {
            io:println(result.message());
            io:println(result.detail()?.executionResults);
            io:println("Rollback transaction.");
            rollback;
        } else {
            error? err = commit;
            if err is error {
                log:printError("Error occurred while committing", err);
            }
        }
    }

    // Performs the cleanup after the example.
    check cleanup(jdbcClient);

    // Closes the JDBC client.
    check jdbcClient.close();
}

// Initializes the database as a prerequisite to the example.
function initialize(jdbc:Client jdbcClient) returns sql:Error? {
    // Creates a table in the database.
    _ = check jdbcClient->execute(`CREATE TABLE Customers(customerId INTEGER
            NOT NULL GENERATED BY DEFAULT AS IDENTITY, firstName  VARCHAR(300),
            lastName  VARCHAR(300), registrationID INTEGER UNIQUE,
            creditLimit DOUBLE, country VARCHAR(300),
            PRIMARY KEY (customerId))`);

    // Adds records to the newly-created table.
    _ = check jdbcClient->execute(`INSERT INTO Customers (firstName,
            lastName, registrationID,creditLimit,country) VALUES ('Peter',
            'Stuart', 1, 5000.75, 'USA')`);
}

// Cleans up the database after running the example.
function cleanup(jdbc:Client jdbcClient) returns sql:Error? {
    // Cleans the database.
    _ = check jdbcClient->execute(`DROP TABLE Customers`);
}
